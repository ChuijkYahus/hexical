plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
	id "me.modmuss50.mod-publish-plugin" version "0.3.0"
}

archivesBaseName = getArtifactId("fabric")

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

afterEvaluate {
	tasks.genSourcesWithCfr.dependsOn ':common:unpickJar'
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modCompileOnly(group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2')
	modImplementation "net.fabricmc:fabric-loader:${project.fabricLoaderVersion}"
	modApi "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}"
	modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabricKotlinVersion}")
	modApi("dev.architectury:architectury-fabric:${architecturyVersion}") {
		exclude group: "net.fabricmc", module: "fabric-loader"
	}
	modImplementation("at.petra-k.hexcasting:hexcasting-fabric-${minecraftVersion}:${hexcastingVersion}") {
		exclude module: "phosphor"
		exclude module: "emi"
	}
	modImplementation "at.petra-k.paucal:paucal-fabric-${minecraftVersion}:${paucalVersion}"
	modImplementation "vazkii.patchouli:Patchouli:${minecraftVersion}-${patchouliVersion}-FABRIC"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${cardinalComponentsVersion}"
	modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${entityReachVersion}"
	include "com.jamieswhiteshirt:reach-entity-attributes:${entityReachVersion}"
	modImplementation "io.github.tropheusj:serialization-hooks:${serializationHooksVersion}"
	include "io.github.tropheusj:serialization-hooks:${serializationHooksVersion}"
	modImplementation "dev.emi:trinkets:${trinketsVersion}"
	runtimeOnly(include("com.github.llamalad7.mixinextras:mixinextras-fabric:${mixinExtrasVersion}"))
	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    from(rootProject.file("common/src/main/resources")) {
        include("data/*/patchouli_books/")
    }
}

shadowJar {
	exclude "architectury.common.json"
	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set null
}

jar {
	archiveClassifier.set "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	repositories {}
	publications {
		mavenFabric(MavenPublication) {
			artifactId = project.archivesBaseName + "-" + project.name + "-fabric"
			from components.java
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	additionalFiles.from(sourcesJar.archiveFile)
	changelog = getLatestChangelog()
	type = STABLE
	modLoaders.add("fabric")
	modLoaders.add("quilt")
	version = project.version + "-fabric"
	displayName = "Hexical $project.version [Fabric]"
}