{
	"advancements.hexical.arch_lamp.title": "Daemon",
	"advancements.hexical.arch_lamp.description": "Acquire an archgenie lamp.",
	"advancements.hexical.reload_lamp.title": "Phenomenal Cosmic Powers!",
	"advancements.hexical.reload_lamp.description": "Reload the lamp.",
	"advancements.hexical.educate_genie.title": "New Order",
	"advancements.hexical.educate_genie.description": "Educate the genie with new instructions.",
	"advancements.hexical.lamp.title": "Diamond in the Rough",
	"advancements.hexical.lamp.description": "Acquire a genie lamp.",
	"advancements.hexical.augmented_reality.title": "Augmented Reality",
	"advancements.hexical.augmented_reality.description": "Conjure a speck.",
	"advancements.hexical.diy_conjuring.title": "DIY Conjuring!",
	"advancements.hexical.diy_conjuring.description": "Add a custom modifier to a mage block.",
	"advancements.hexical.conjure_hexxy.title": "Conjure Hexxy",
	"advancements.hexical.conjure_hexxy.description": "Give Hexxy a physical form in your world.",
	"advancements.hexical.hallucinate.title": "Only In My Head",
	"advancements.hexical.hallucinate.description": "Play a sound only you can hear!",
	"advancements.hexical.media_slurp.title": "Tripping",
	"advancements.hexical.media_slurp.description": "\"You sense that something is off.\"",

	"block.hexical.hex_candle": "Hex Candle",
	"block.hexical.mage_block": "Mage Block",
	"block.hexical.media_jar": "Media Jar",
	"death.attack.magic_missile": "%1$s was struck with arcane force by %2$s",
	"death.attack.magic_missile.item": "%1$s was struck with arcane force by %2$s using %3$s",
	"death.attack.spike": "%1$s was punctured by %2$s",
	"death.attack.spike.item": "%1$s was punctured by %2$s using %3$s",
	"entity.hexical.animated_scroll": "Animated Scroll",
	"entity.hexical.magic_missile": "Magic Missile",
	"entity.hexical.mesh": "Mesh",
	"entity.hexical.speck": "Speck",
	"entity.hexical.spike": "Amethyst Spike",
	"key.categories.hexical": "Hexical",
	"key.hexical.evoke": "Evoke",
	"key.hexical.open_hexbook": "Open Hex Notebook",
	"key.hexical.telepathy": "Call Telepathy",
	"item.hexical.animated_scroll_small": "Small Animated Scroll",
	"item.hexical.animated_scroll_medium": "Medium Animated Scroll",
	"item.hexical.animated_scroll_large": "Large Animated Scroll",
	"item.hexical.arch_lamp": "Archgenie Lamp",
	"item.hexical.conjured_compass": "Conjured Compass",
	"item.hexical.grimoire": "Grimoire",
	"item.hexical.hand_lamp": "Hand Genie Lamp",
	"item.hexical.hexburst": "Hexburst",
	"item.hexical.hextito": "Hextito",
	"item.hexical.gauntlet_staff": "Gauntlet Staff",
	"item.hexical.lightning_rod_staff": "Lightning Rod Staff",
	"item.hexical.tchotchke": "Tchotchke",
	"itemGroup.hexical.general": "Hexical",
	"subtitles.hexical.evoking_murmur": "Player chants",
	"subtitles.hexical.evoking_casts": "Player casts",
	"subtitles.hexical.lamp_activate": "Lamp activates",
	"subtitles.hexical.lamp_deactivate": "Lamp deactivates",
	"subtitles.hexical.player_slurp": "Player slurps",
	"subtitles.hexical.replenish_air": "Air appears",
	"subtitles.hexical.sudden_realization": "Idea pops",
	"tooltip.hexical.scroll_aged": "Aged",
	"tooltip.hexical.scroll_glow": "Glowing",
	"tooltip.hexical.scroll_vanished": "Vanished",

	"hexical.autograph.header": "Autographed by:",

	"hexcasting.mishap.bad_block.akashic_bookshelf": "an akashic bookshelf",
	"hexcasting.mishap.bad_block.mage_block": "a mage block",
	"hexcasting.mishap.bad_block.prestidigitation": "a prestidigitation-sensitive block",
	"hexcasting.mishap.bad_item.animated_scroll": "an animated scroll",
	"hexcasting.mishap.bad_item.anything": "any item",
	"hexcasting.mishap.bad_item.firework_star": "a firework star",
	"hexcasting.mishap.bad_item.grimoire": "a grimoire",
	"hexcasting.mishap.bad_item.has_brain": "a villager capable of thought",
	"hexcasting.mishap.bad_item.hand_lamp": "a Hand Genie Lamp",
	"hexcasting.mishap.bad_item.lamp": "a lamp",
	"hexcasting.mishap.bad_item.mesh": "a mesh",
	"hexcasting.mishap.bad_item.prestidigitation": "a prestidigitation-sensitive entity",
	"hexcasting.mishap.bad_item.smart_villager": "a Journeyman or greater level villager",
	"hexcasting.mishap.bad_item.speck": "a speck",
	"hexcasting.mishap.bad_item.specklike": "a specklike entity",
	"hexcasting.mishap.invalid_value.axis_vector": "an axis vector",
	"hexcasting.mishap.invalid_value.block_id": "an identifier of a block type",
	"hexcasting.mishap.invalid_value.class.dye": "a dye",
	"hexcasting.mishap.invalid_value.class.identifier": "an identifier",
	"hexcasting.mishap.invalid_value.class.pigment": "a pigment",
	"hexcasting.mishap.invalid_value.enchantment_id": "an identifier of an enchantment type",
	"hexcasting.mishap.invalid_value.entity_or_vector": "an entity or a vector",
	"hexcasting.mishap.invalid_value.food_id": "an identifier of a food item type",
	"hexcasting.mishap.invalid_value.identifiable": "an identifiable target",
	"hexcasting.mishap.invalid_value.integer_natural": "an integer greater than 0",
	"hexcasting.mishap.invalid_value.item_id": "an identifier of an item type",
	"hexcasting.mishap.invalid_value.lenient_living": "a living entity or an armor stand",
	"hexcasting.mishap.invalid_value.mesh_design": "a list of up to 32 vectors with magnitudes less than 10",
	"hexcasting.mishap.invalid_value.nonempty_list": "a non-empty list",
	"hexcasting.mishap.invalid_value.number_list": "a non-empty list of numbers",
	"hexcasting.mishap.invalid_value.potion_holding": "a food, potion, or tipped arrow item entity",
	"hexcasting.mishap.invalid_value.recognizable": "a target with extra information",
	"hexcasting.mishap.invalid_value.solid_block": "a non-air block",
	"hexcasting.mishap.invalid_value.status_effect_id": "an identifier of a status effect type",
	"hexcasting.mishap.invalid_value.to_pigment": "a colored dye, identifier of a pigment item, an item entity containing a pigment, or a player",
	"hexcasting.mishap.invalid_value.true_dye": "a colored dye",
	"hexcasting.mishap.invalid_value.true_dye_list": "a list of colored dyes",
	"hexcasting.mishap.hexical:active_arch_lamp": "Expected an active Arch Lamp in the inventory.",
	"hexcasting.mishap.hexical:assert": "Assertion failed: %s.",
	"hexcasting.mishap.hexical:can_not_dye": "Expected a dyeable target",
	"hexcasting.mishap.hexical:inedible": "Wristpocketed item is not edible.",
	"hexcasting.mishap.hexical:needs_staff": "Expected to be cast by a staff.",
	"hexcasting.mishap.hexical:needs_lamp": "Expected to be cast by a genie.",
	"hexcasting.mishap.hexical:needs_hand_lamp": "Expected to be cast by a hand genie.",
	"hexcasting.mishap.hexical:needs_turret": "Expected to be cast by a genie on a pedestal.",
	"hexcasting.mishap.hexical:needs_skippable": "Expected to be run inside of Sisyphus' Gambit, Themis' Gambit, or Thoth's Gambit.",
	"hexcasting.mishap.hexical:needs_thoth": "Expected to be run inside of Thoth's Gambit.",
	"hexcasting.mishap.hexical:outside_circle": "Spell exceeds the domain of the spell circle.",
	"hexcasting.mishap.hexical:themis": "Expected a number at the top of the Themis pseudo-stack.",

	"hexcasting.action.book.hexical:get_arch_lamp_position": "Arch. Refl.: Spatial",
	"hexcasting.action.book.hexical:get_arch_lamp_rotation": "Arch. Refl.: Rotational",
	"hexcasting.action.book.hexical:get_arch_lamp_velocity": "Arch. Refl.: Kinetic",
	"hexcasting.action.book.hexical:get_arch_lamp_use_time": "Arch. Refl.: Temporal",
	"hexcasting.action.book.hexical:get_arch_lamp_media": "Arch. Refl.: Media",
	"hexcasting.action.book.hexical:get_arch_lamp_storage": "Arch. Refl.: Memory",
	"hexcasting.action.book.hexical:get_effect_amplifier": "Concentration Dstl.",
	"hexcasting.action.book.hexical:get_effects_item": "Prescription Purif.",
	"hexcasting.action.book.hexical:get_enchantments": "Thaumaturgist's Purif.",
	"hexcasting.action.book.hexical:breedable": "Reproduction Purif.",
	"hexcasting.action.book.hexical:get_hand_lamp_position": "Genie Refl.: Spatial",
	"hexcasting.action.book.hexical:get_hand_lamp_rotation": "Genie Refl.: Rotational",
	"hexcasting.action.book.hexical:get_hand_lamp_velocity": "Genie Refl.: Kinetic",
	"hexcasting.action.book.hexical:get_hand_lamp_use_time": "Genie Refl.: Temporal",
	"hexcasting.action.book.hexical:get_hand_lamp_media": "Genie Refl.: Media",
	"hexcasting.action.book.hexical:get_hand_lamp_storage": "Genie Refl.: Memory",
	"hexcasting.action.book.hexical:nephthys": "Nephthys's Gambit",
	"hexcasting.action.book.hexical:sekhmet": "Sehkmet's Gambit",
	"hexcasting.action.book.hexical:serialize_pattern": "Chirographer's Purif.",
	"hexcasting.action.book.hexical:deserialize_pattern": "Calligrapher's Purif.",
	"hexcasting.action.book.hexical:shuffle_pattern": "Glyphmaker's Dstl.",
	"hexcasting.action.book.hexical:read_shelf": "Librarian's Purif. II",
	"hexcasting.action.book.hexical:zone_specklike": "Zone Dstl.: Specklike",
	"hexcasting.action.book.hexical:modify_block_bouncy": "Bouncy",
	"hexcasting.action.book.hexical:modify_block_energized": "Energized",
	"hexcasting.action.book.hexical:modify_block_ephemeral": "Ephemeral",
	"hexcasting.action.book.hexical:modify_block_invisible": "Invisible",
	"hexcasting.action.book.hexical:modify_block_replaceable": "Replaceable",
	"hexcasting.action.book.hexical:modify_block_volatile": "Volatile",
	"hexcasting.action.book.hexical:theodolite": "Theodolite Purif.",
	"hexcasting.action.book.hexical:identify": "Detective's Purif.",
	"hexcasting.action.book.hexical:recognize": "Recognizer's Purif.",
	"hexcasting.action.book.hexical:damage_stack": "Deterioration Purif.",
	"hexcasting.action.book.hexical:classify": "Classifier's Purif.",
	"hexcasting.action.book.hexical:get_biome": "Geographical Purif.",
	"hexcasting.action.book.hexical:get_weather": "Meterologist's Refl.",

	"hexical.page.hexical_changes.title": "Hexical Changes",
	"hexical.page.hexical_changes.0": "I feel strangely more in tune with the ambient _media around me. It feels $(o)friendlier$() somehow. I can even feel it rippling around me, responding to my actions, as if engaging with me. The _media also feels more malleable, more $(o)workable$(); I sense I am able to manipulate it into more precise and specific specialized effects. I can also bring up my $(item)Hex Notebook$() by pressing $(thing)$(k:hexical.open_hexbook).",
	"hexical.page.hexical_changes.1": "I also find my tools more familiar. I don't require the same level of caution with my $(l:items/staff)$(item)Staff$() and can move around during casting, handy for chasing down targets that get out of my line of sight before I can finish my raycast. I shouldn't become too inattentive though, Nature has not become more forgiving of my miscalculations. I can also write directly into my $(l:items/abacus)$(item)Abacus$() with $(l:patterns/readwrite#hexcasting:write)Scribe's Gambit$().",
	"hexical.page.lightning_rod_staff.0": "By fixing a $(item)Block of Amethyst$() to some $(item)Lightning Rods$(), I can make quite the impressive $(l:items/staff)$(item)Staff$(). It is quite weighty to wield but feels absolutely $(o)electrifying$() to use.",
	"hexical.page.lightning_rod_staff.1": "$(o)I learned there are troubles$(br)Of more than one kind.$(br)Some come from ahead$(br)And some come from behind.$(br2)But I've bought a big bat.$(br)I'm all ready, you see.$(br)Now my troubles are going$(br)To have troubles with $(l)me!$()",
	"hexical.page.gauntlet_staff.0": "$(l:items/staff)$(item)Staves$() are quite heavy to wield and finnicky to hold. Should I tire of them, I can construct a gauntlet-like device that will allow me to grasp and warp the _media to my will with my own hands.",
	"hexical.page.gauntlet_staff.1": "$(o)Even the wand itself seems impractical to me. If you need something to grasp and shape the aura, it should be something appropriate. Something like a glove.$()$(br2)- Strange notes I have recovered from an odd book. Clearly this \"aura\" they speak of is _media.",

	"hexical.page.grimoire.title": "Grimoires",
	"hexical.page.grimoire.0": "By encrusting an $(item)Enchanted Book$() with $(l:items/amethyst)$(item)Charged Amethyst$() and $(l:items/edified)$(item)Edified Wood$()$(), it traps _media within the pages like an echo chamber. I can then introduce pattern-to-pattern-list bindings for the $(item)Grimoire$() to keep bouncing endlessly inside.",
	"hexical.page.grimoire.1": "When I then cast the $(l:patterns/patterns_as_iotas)pattern$() associated with a pattern list with my $(l:items/staff)$(item)Staff$() and the $(item)Grimoire$() in my inventory, the pattern $(o)expands$() with a faint sound of a _Hex being cast. I create shortcuts for tedious tasks with this, like the raycast mantra or large patterns. The $(item)Grimoire$() can even hijack Nature's patterns, to overwrite or add extra functionality.$(br2)$(o)If there's a book that you want to read, but it hasn't been written yet, then you must write it.$()",
	"hexcasting.action.hexical:write_grimoire": "Write Grimoire",
	"hexical.page.write_grimoire.summary": "Associates a pattern to a list of patterns in the $(item)Grimoire$() in my offhand.",
	"hexcasting.action.hexical:erase_grimoire": "Erase Grimoire",
	"hexical.page.erase_grimoire.summary": "Erases any associations for a pattern that may exist in the $(item)Grimoire$() in my offhand.",
	"hexcasting.action.hexical:index_grimoire": "Archivist Reflection",
	"hexical.page.index_grimoire.summary": "Gets a list of all patterns modified by the $(item)Grimoire$() in my offhand.",

	"hexical.page.animated_scroll.title": "Animated Scrolls",
	"hexical.page.animated_scroll.0": "$(item)Animated Scrolls$() are mixed with a pinch of $(l:items/amethyst)$(item)Amethyst Dust$(), enchanting the ink to move and wiggle like the patterns I draw with my $(l:items/staff)$(item)Staff$(). Not only that, they can display lists of patterns.$(br2)$(o)You can't be a proper writer without a touch of madness, can you?$()",
	"hexical.page.animated_scroll.1": "I can freely write and rewrite the scroll's patterns at any time, along with reading it back out. The scroll accepts only a list of $(l:patterns/patterns_as_iotas)pattern iotas$() or a lone $(l:patterns/patterns_as_iotas)pattern iota$(), which is automatically wrapped in a list. The $(item)Animated Scroll$() shows one pattern at a time which cycles to the next one once per second. Even when I write the same list to two of them at different moments of their cycle, they display in sync.",
	"hexical.page.animated_scroll.2": "The next few pages detail some free spells I've found for the manipulation of $(item)Animated Scrolls$(). The changes caused by these spells can usually be reverted by casting the spell on the scroll again.",
	"hexcasting.action.hexical:age_scroll": "Age Scroll",
	"hexical.page.age_scroll.summary": "Yellows the parchment of an $(item)Animated Scroll$(), making it bear striking semblance to some ancient scrolls I've been finding.",
	"hexcasting.action.hexical:color_scroll": "Dye Ink",
	"hexical.page.color_scroll.summary": "Changes the color of an $(item)Animated Scroll's$() ink to the color specified by the vector, with the components being 0 to 1 values of red, green, and blue respectively.",
	"hexcasting.action.hexical:glow_scroll": "Illuminate Ink",
	"hexical.page.glow_scroll.summary": "Causes the ink of an $(item)Animated Scroll$() to brightly glow, regardless of lighting conditions.",
	"hexcasting.action.hexical:vanish_scroll": "Vanish Scroll",
	"hexical.page.vanish_scroll.summary": "Causes the $(item)Animated Scroll$() to become invisible leaving only the pattern, making it appear as though the pattern were magically etched into the surface the scroll is on.",

	"hexical.page.hex_candle.title": "Hex Candles",
	"hexical.page.hex_candle.0": "When ignited for the first time, either $(l:patterns/spells/prestidigitation)magically$() or with a $(item)Flint and Steel$(), these delightful little candles have pale white flames. When someone interacts with it though, it copies their pigment. I can also give it with a pigment item to change its color directly. To extinguish, $(thing)$(k:sneak) $(k:use)$().",
    "hexical.page.hex_candle.1": "$(o)The doctor found himself in an immense cave lined with countless quivering candles, each representing the duration of a life.$()",

	"hexical.page.media_jar.title": "Media Jar",
	"hexical.page.media_jar.0": "I can craft this little decorative jar of liquid _media that glows quite brightly. Unfortunately, it seems the glass is too thick for me to draw _media through it, although I have read tales that ancient _Hexcasters were able to solve this issue and being able to bottle up liquid _media and use it for their _Hexes.",
	"hexical.page.media_jar.1": "A similar item was built by prior _Hexcasters and they seemed to use it as crystal ball by sipping the fluid. Holding the energy of thought that permeates existence, perhaps its answers hold some merit.$(br2)$(o)Signs point to yes.$()",

	"hexical.category.lamp": "Genie Lamp",
	"hexical.category.lamp.desc": "I have heard some tales from the villagers about a magical artifact. The villagers say it contains a spirit that grants wishes, but I suspect that is just grand embellishment evolved over centuries of storytelling. However, legends must arise from something and this item must be exceptionally powerful, and so I dedicate this section to my pursuit and research of it.",

	"hexcasting.action.hexical:lamp_finale": "Finale Reflection",
	"hexical.page.lamp_finale.hand": "The instant I let go of my lamp, it casts an additional time. I can use this pattern to recognize whether a cast is that finale, and react accordingly.",
	"hexical.page.lamp_finale.arch": "When an archgenie lamp is turned off, it casts an additional time. I can use this pattern to recognize when whether a cast is that last burst of energy.",

	"hexical.page.mysterious_lamp.title": "Hand Lamps",
	"hexical.page.mysterious_lamp.0": "So this is the subject of a thousand years of rumor! To think a mere wandering trader could be in possession of such a strong artifact. The $(item)Hand Lamp$() emanates a vague residue of _media, vacuous in feeling... it reminds me of the $(o)hollow media structure$() of a $(l:items/focus)$(item)Focus$() that enables it to store iota. I can also sense a presence inside the lamp with similar magical capabilities to my own.",
    "hexical.page.mysterious_lamp.1": "The signs are unmistakable; within the lamp is a $(o)living, sentient$() mind, kept alive and trapped via magic not yet known to me. The lamp's design is simply ingenious, if its use weren't so horrible. When I hold down the trigger, my patterns are revealed to the \"genie\" as I will be calling it, and it, out of desperation and boredom, casts.",
	"hexcasting.action.hexical:wish": "Wish",
	"hexical.page.wish.summary": "Wish the genie to cast a _Hex for me. Because I am $(o)teaching$() a mind rather than $(o)etching$() a $(l:items/hexcasting)$(item)casting device$(), I can freely reteach the genie a new _Hex any time without losing _media.",
    "hexical.page.mysterious_lamp.2": "To say it casts is an understatement. It casts $(o)$(l)EVERY INSTANT$(). When holding the switch after wishing, I am treated to a splendid unceasing gush of _media. I can only estimate it must be around twenty times every second. The genie performs the casting with incredible efficiency, producing little of the sounds and particles that accompany other casting methods.",
	"hexical.page.mysterious_lamp.3": "I have developed some useful patterns to communicate with the genie for information, documented on the next few pages. These patterns must only be cast by the genie within the lamp, lest I succumb to the Impersonate Genie mishap.$(br2)$(o)I am not a tool for your convenience.$()$(br)Strange murmuring occasionally emitted from the lamp. Likely disregardable.",
	"hexcasting.action.hexical:get_hand_lamp_position": "Genie Reflection: Spatial",
	"hexical.page.get_hand_lamp_position.summary": "Pushes my original position when I began using the lamp.",
	"hexcasting.action.hexical:get_hand_lamp_rotation": "Genie Reflection: Rotational",
	"hexical.page.get_hand_lamp_rotation.summary": "Pushes my original rotation when I began using the lamp.",
	"hexcasting.action.hexical:get_hand_lamp_velocity": "Genie Reflection: Kinetic",
	"hexical.page.get_hand_lamp_velocity.summary": "Pushes my original velocity when I began using the lamp.",
	"hexcasting.action.hexical:get_hand_lamp_use_time": "Genie Reflection: Temporal",
	"hexical.page.get_hand_lamp_use_time.summary": "Pushes how many times the lamp has cast since I began using the lamp. I can divide by by 20 to convert to seconds.",
	"hexcasting.action.hexical:get_hand_lamp_media": "Genie Reflection: Media",
	"hexical.page.get_hand_lamp_media.summary": "Pushes the remaining _media of the lamp, in units of dust.",
	"hexcasting.action.hexical:set_hand_lamp_storage": "Genie Gambit",
	"hexical.page.set_hand_lamp_storage.summary": "Asks the genie to remember an iota for me. Strangely, the genie seems able to bypass the Transgress Others mishap, perhaps because it requires my active concentration to use this lamp.",
	"hexcasting.action.hexical:get_hand_lamp_storage": "Genie Reflection: Memory",
	"hexical.page.get_hand_lamp_storage.summary": "Requests the iota I had saved to the genie to be pushed to the top of the stack. If I had not previously saved anything, the genie pushes $(l:casting/influences)$(thing)Null$().",

	"hexical.page.replacement.title": "Replacement of Genies",
	"hexical.page.replacement.0": "Hex casting burns out the mind from the energy of thought, flooding the consciousness, inundating every neuron... it's euphoric. For $(l:items/staff)$(item)Staves$(), $(l:items/hexcasting)$(item)casting devices$(), and spell circles, the rate of casting is slow enough that a mind can recuperate; I will never need to replace an impetus. With the speeds lamps operates at, though, even an optimized mind can feel strain.",
	"hexical.page.replacement.1": "The lamp traps the genie and any attempts to refuel it will free it. Thus, the only way to recharge a genie lamp is to simultaneously replace the _media $(o)and$() the genie, forcing a new mind to work in its stead. Perhaps this is why a genie is so eager to cast... Regardless, a villager will work quite nicely. That is the effect of the spell I have detailed on the next page.$(br2)$(o)My name? My name is... oh god, why can't I remember my name?$()",
	"hexcasting.action.hexical:recharge_lamp": "Make Genie",
	"hexical.page.recharge_lamp.summary": "$(o)Borrow$() the experiences and memory of a villager and transforms it into a genie to serve the lamp in my offhand. The spell itself costs about one $(l:items/amethyst)$(item)Charged Amethyst$(), plus the _media I'm giving the lamp.",
	"hexical.page.replacement.2": "Notably, this spell will $(o)not$() kill the villager. It splinters off a section of their mind to serve as the genie and as for the villager's main consciousness, it only results in amnesia. I have heard rumors of ancient _Hexcasters $(o)growing$() villager minds like crops using this property: consume them to recharge lamps and allow the villagers to regenerate their lost knowledge in between.",
	"hexical.page.replacement.3": "Not all villagers can be a genie. I estimate there is so little media potential in any villager lesser than Journeyman-grade that the spell would simply fail. Having most of its workings $(o)optimized$() purely for casting, I doubt an Expert villager will perform any better than a Journeyman.",
	"hexcasting.action.hexical:promote_lamp": "Promote Lamp",
	"hexical.page.promote_lamp.summary": "If just a sliver of a mind is capable of such power, how about the whole body? Hold the lamp in my other hand and cast. Costs about ten $(l:items/amethyst)$(item)Charged Amethyst$().",

	"hexical.page.arch_lamps.title": "Archgenie Lamps",
	"hexical.page.arch_lamps.0": "The lamp was yanked out of my hands and towards the villager, sucking it in completely and transforming the lamp. The greater mind within these $(item)Archgenie Lamps$() should enable them to be activated and deactivated rather than used and while active in my inventory, they will cast every instant.",
	"hexical.page.arch_lamps.1": "The output of an $(item)Archgenie Lamp$() is so grand that it saturates the air around me with _media... it's incredible. Unfortunately, if two such lamps are active at once within my inventory, their resonances clash and all lamps in my inventory are rendered useless for a few seconds. I should only have one $(item)Archgenie Lamp$() active at one time, although I can still simultaneously use a $(item)Hand Lamp$().",
	"hexical.page.arch_lamps.2": "$(o)I am a great soft jelly thing. Smoothly rounded, with no mouth, with pulsing white holes filled by fog where my eyes used to be. Rubbery appendages that were once my arms; bulks rounding down into legless humps of soft slippery matter.$(br2)I have no mouth. And I must scream.$()",
	"hexcasting.action.hexical:has_arch_lamp": "Archgenie Purification",
	"hexical.page.has_arch_lamp.summary": "Pushes whether a player currently has an active arch lamp.",
	"hexcasting.action.hexical:get_arch_lamp_position": "Archgenie Reflection: Spatial",
	"hexical.page.get_arch_lamp_position.summary": "Pushes my original position when the arch lamp started casting.",
	"hexcasting.action.hexical:get_arch_lamp_rotation": "Archgenie Reflection: Rotational",
	"hexical.page.get_arch_lamp_rotation.summary": "Pushes my original rotation when the arch lamp started casting.",
	"hexcasting.action.hexical:get_arch_lamp_velocity": "Archgenie Reflection: Kinetic",
	"hexical.page.get_arch_lamp_velocity.summary": "Pushes my original velocity when the arch lamp started casting.",
	"hexcasting.action.hexical:get_arch_lamp_use_time": "Archgenie Reflection: Temporal",
	"hexical.page.get_arch_lamp_use_time.summary": "Pushes how many times the arch lamp has cast since its activation. I can divide by by 20 to convert to seconds.",
	"hexcasting.action.hexical:get_arch_lamp_media": "Archgenie Reflection: Media",
	"hexical.page.get_arch_lamp_media.summary": "Pushes the remaining amount of _media left in the arch lamp, in units of dust.",
	"hexcasting.action.hexical:set_arch_lamp_storage": "Archgenie Gambit",
	"hexical.page.set_arch_lamp_storage.summary": "Can be cast by a $(l:items/hexcasting)$(item)casting device$(), $(l:items/staff)$(item)Staff$(), or within the arch lamp to remember an iota. Unlike hand lamps, this is subject to Transgress Others mishap.",
	"hexcasting.action.hexical:get_arch_lamp_storage": "Archgenie Reflection: Memory",
	"hexical.page.get_arch_lamp_storage.summary": "Can be cast by a $(l:items/hexcasting)$(item)casting device$(), $(l:items/staff)$(item)Staff$(), or within the arch lamp to push the stored iota.",

	"hexical.page.enlightened_patterns.title": "Enlightened Patterns",
	"hexical.page.enlightened_patterns.0": "After my enlightenment, I find myself acutely aware of certain patterns that seem to aid with my newfound abilities to perceive and manipulate _media. These patterns don't seem to require anything new from me, perhaps I've always been able to cast them but was unaware of their existence. That property means I can give an unenlightened player $(l:items/hexcasting)$(item)casting devices$() with these patterns and they will be able to cast it.",
	"hexcasting.action.hexical:am_enlightened": "Epiphany Purification",
	"hexical.page.am_enlightened.summary": "Pushes whether the given player has achieved enlightenment like I have.",
	"hexcasting.action.hexical:is_brainswept": "Sentience Purification",
	"hexical.page.is_brainswept.summary": "Pushes whether an entity \"has been magically relieved of its mind\". I feel this is strongly related to $(l:patterns/great_spells/brainsweep)$(action)Flay Mind$() somehow...",

	"hexical.page.simple_patterns.title": "Hexical Patterns",
	"hexcasting.action.hexical:garbage": "Garbage Reflection",
	"hexical.page.garbage.summary": "Pushes $(l:casting/influences)$(action)Garbage$() to my stack. I am unsure why I would ever want this pattern but it exists.",
	"hexcasting.action.hexical:get_media": "Media Purification",
	"hexical.page.get_media.summary": "Pushes the amount of media inside an item, that a creature contains or holds, or that a specialized media-holding block contains.",
	"hexcasting.action.hexical:swap_one_three": "Reflecting Gambit",
	"hexical.page.swap_one_three.summary": "Reflects the order of the top three iota, turning A, B, C into C, B, A. Essentially swaps the top and the third-from-the-top iota.",
	"hexcasting.action.hexical:swap_two_three": "Bubbling Gambit",
	"hexical.page.swap_two_three.summary": "Causes the third-from-the-top iota to bubble up over the second-from-the-top iota, essentially swapping them.",
	"hexcasting.action.hexical:dup_many": "Dioscuri Gambit II",
	"hexical.page.dup_many.summary": "Takes a number and duplicates that many elements of the stack while preserving order.",

	"hexical.page.patterns.title": "Pattern Manipulation",
	"hexical.page.patterns.0": "These patterns concern the manipulation and construction of other patterns. Strangely, these patterns can be used to construct patterns that are $(o)impossible$() to draw with a staff, although fortunately, I don't believe any \"illegal\" patterns have any effects.",
	"hexcasting.action.hexical:congruent": "Congruence Distillation",
	"hexical.page.congruent.summary": "Pushes whether two patterns have the same shape and orientation.",
	"hexcasting.action.hexical:serialize_pattern": "Chirographer's Purification",
	"hexical.page.serialize_pattern.summary": "Turns a pattern into a list of numbers for my splitting, analysis, and dissection.",
	"hexical.page.patterns.1": "The list of numbers returned by $(l:patterns/pattern_manipulation#hexical:serialize_pattern)$(action)Chirographer's Purification$() are related to the strokes. The diagonal stroke that travels upwards and rightwards is labeled 0 and all other strokes are labelled incrementally in a counter-clockwise rotation.",
	"hexical.page.patterns.2": "There are various properties of these lists that I can use. By adding or subtracting a constant, I can rotate the pattern. For cyclical patterns, rotating the list by moving the first element to the end or vice versa rotates the starting position. By carefully altering numbers with list manipulation, I can also make some kind of $(o)backwards stroke$().",
	"hexcasting.action.hexical:deserialize_pattern": "Calligrapher's Purification",
	"hexical.page.deserialize_pattern.summary": "Turns a list of numbers back into a pattern. Applies a strange remainder effect to numbers outside of the 0-5 range to coerce it into a useable form. This is the inverse of $(l:patterns/pattern_manipulation#hexical:serialize_pattern)$(action)Chirographer's Purification$().",
	"hexcasting.action.hexical:draw_pattern": "Handwriting Distillation",
	"hexical.page.draw_pattern.summary": "Takes a pattern and transforms it into a normalized list of vectors. I feel this may be useful for artistic spells.",
	"hexcasting.action.hexical:shuffle_pattern": "Glyphmaker's Distillation",
	"hexical.page.shuffle_pattern.summary": "Takes in a pattern and a number and produces a pattern of the same shape, but different stroke order. My notes reveal that ancient _Hexcasters used this for some $(o)grand library$().",

	"hexical.page.perlin.title": "Quasirandomness",
	"hexical.page.perlin.0": "In certain regions of the world, ambient _media is more concentrated. I can measure that concentration and even extrapolate backwards and forwards in time to get a quasi-random number between 0 and 1, corresponding to that location at that time. Points in time and space that are close to each other often have similar values.",
	"hexcasting.action.hexical:perlin": "Perlin Distillation",
	"hexical.page.perlin.summary": "Measures the concentration of ambient at that point in space and time, normalized between 0 and 1.",

	"hexical.page.special_raycasts.title": "Special Raycasts",
	"hexcasting.action.hexical:fluid_raycast": "Naval Distillation",
	"hexical.page.fluid_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast)$(action)Archer's Distillation$() but targets only liquids, piercing through all other blocks.",
	"hexcasting.action.hexical:fluid_surface_raycast": "Lilypad Distillation",
	"hexical.page.fluid_surface_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast/axis)$(action)Architect's Distillation$() but targets only liquids, piercing through all other blocks.",
	"hexcasting.action.hexical:piercing_raycast": "Railgun Exaltation",
	"hexical.page.piercing_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast)$(action)Archer's Distillation$() but accepts an additional identifier. It will pierce all blocks until it hits the block specified by the identifier.",
	"hexcasting.action.hexical:piercing_surface_raycast": "Laser Exaltation",
	"hexical.page.piercing_surface_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast/axis)$(action)Architect's Distillation$() but accepts an additional identifier. It will pierce all blocks until it hits the block specified by the identifier.",

	"hexical.page.telepathy.title": "Telepathy",
	"hexical.page.telepathy": "_Media is the energy of thought and consequently, it can interact with thoughts as well. Unfortunately or perhaps fortunately for me, the minds of players are too resistant to be swayed by _Hexes and even the minds of villagers resist tampering. There is a notable exception though: my own mind is open to my own _media, allowing me to read my own intentions and write thoughts to myself.",
	"hexcasting.action.hexical:get_telepathy": "Telepathic Reflection",
	"hexical.page.get_telepathy.summary": "By focusing on a particular image, I can detect that concentration via this pattern. Pushes how many twentieths of a second I've been intending to $(thing)$(k:hexical.telepathy)$(), or -1 if I am not.",
	"hexcasting.action.hexical:send_telepathy": "Send Thought",
	"hexical.page.send_telepathy.summary": "Momentarily displays an iota above my hotbar. If cast repeatedly, each cast overwrites the previous instantly.",
	"hexcasting.action.hexical:shout_telepathy": "Shout Thought",
	"hexical.page.shout_telepathy.summary": "Grandly flahes an iota across my vision. It obstructs my vision and takes some time to fade in, so I shall only use it sparingly.",
	"hexcasting.action.hexical:pling": "Hallucinate Pling",
	"hexical.page.pling.summary": "Causes me to hear a pling that is inaudible to other players.",
	"hexcasting.action.hexical:click": "Hallucinate Click",
	"hexical.page.click.summary": "Causes me to hear a click that is inaudible to other players.",
	"hexcasting.action.hexical:moving_up": "Charge Reflection",
	"hexical.page.moving_up.summary": "Pushes how many twentieths of a second I've been intending to $(thing)$(k:forward)$(), or -1 if I am not.",
	"hexcasting.action.hexical:moving_down": "Retreat Reflection",
	"hexical.page.moving_down.summary": "Pushes how many twentieths of a second I've been intending to $(thing)$(k:back)$(), or -1 if I am not.",
	"hexcasting.action.hexical:moving_left": "Dodge Reflection",
	"hexical.page.moving_left.summary": "Pushes how many twentieths of a second I've been intending to $(thing)$(k:left)$(), or -1 if I am not. Can be differentiated from Evade Reflection because d comes to the left of e.",
	"hexcasting.action.hexical:moving_right": "Evade Reflection",
	"hexical.page.moving_right.summary": "Pushes how many twentieths of a second I've been intending to $(thing)$(k:right)$(), or -1 if I am not. Can be differentiated from Dodge Reflection because e comes to the right of d.",
	"hexcasting.action.hexical:jumping": "Leaping Reflection",
	"hexical.page.jumping.summary": "Pushes how many twentieths of a second I've been intending to $(thing)$(k:jump)$(), or -1 if I am not.",
	"hexcasting.action.hexical:sneaking": "Stealthy Reflection",
	"hexical.page.sneaking.summary": "Pushes how many twentieths of a second I've been intending to $(thing)$(k:sneak)$(), or -1 if I am not.",

	"hexical.page.soroban.title": "Soroban Patterns",
	"hexical.page.soroban.0": "These patterns manipulate an imaginary counter called the soroban. I shall find them useful when my $(l:patterns/readwrite#hexcasting:local)Ravenmind$() is occupied or unnecessarily complicated, for example to count iterations in a $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() loop. Some ancient scraps recommend its use for some sort of $(o)recursive depth$().",
	"hexcasting.action.hexical:soroban_increment": "Soroban Reflection",
	"hexical.page.soroban_increment.summary": "Pushes soroban's current value and then increases it. The soroban starts at 0.",
	"hexcasting.action.hexical:soroban_decrement": "Soroban Reflection II",
	"hexical.page.soroban_decrement.summary": "Pushes soroban's current value and then decreases it.",
	"hexcasting.action.hexical:soroban_reset": "Soroban Gambit",
	"hexical.page.soroban_reset.summary": "Resets the soroban to 0.",

	"hexical.page.metas.title": "Hexical Metaevals",
	"hexcasting.action.hexical:tutu": "Tutu's Gambit",
	"hexical.page.tutu.0": "Does nothing.",
	"hexical.page.tutu.1": "This pattern seems useless but is helpful in conjunction with Charon's Gambit or Janus' Gambit as the \"other branch\". Executing it does not consume an operation, consume media, or have impact on the world.$(br2)$(o)The only winning move is not to play.$()",
	"hexcasting.action.hexical:maat": "Ma'at's Gambit",
	"hexical.page.maat.0": "Takes a boolean and any iota. If the boolean is false, mishaps and prints the iota.",
	"hexical.page.maat.1": "This pattern is useful in order to break out of _Hexes if certain programmed conditions are not met. For example not allowing a _Hex to be cast during the rain or in the Overworld.$(br2)$(o)Order in the court.$()",
	"hexcasting.action.hexical:janus": "Janus' Gambit",
	"hexical.page.janus.0": "Instantly terminates the _Hex regardless of current circumstances, breaking even through $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() and $(l:patterns/meta#hexcasting:eval)$(action)Hermes' Gambit$() unlike $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$().",
	"hexical.page.janus.1": "It's useful to end a _Hex early once it has reached some desired state, without the difficulty of using $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() because $(l:patterns/metaevals#hexical:janus)$(action)Janus'$() can bypass the \"containment\" of $(l:patterns/meta#hexcasting:eval)$(action)Hermes'$() and $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$().$(br2)$(o)It is always important to know when something has reached its end.$()",
	"special.hexical:nephthys": "Nephthys' Gambit: %s",
	"hexical.page.nephthys.0": "Pops a pattern or pattern list and dives down an amount corresponding to the tail length to cast the pattern list. Useful for surgery-like operations.",
	"hexical.page.nephthys.1": "It's extremely versatile and I can mend almost any error in my stack using $(l:patterns/stackmanip#hexcasting:mask)$(action)Bookkeeper's Gambit$(), pushing iota after a dive, and transforming surfaced iota. It was named after a goddess of mourning and rivers, lending to how it buries/dives down into the stack.$(br2)$(o)... the unknowns of time travel... is akin to descending blindly into the depths of the freezing water and reappearing as an acorn.$()",
	"special.hexical.sekhmet": "Sekhmet's Gambit: %s",
	"hexical.page.sekhmet.0": "Voids the entire stack except for the top n iota, determined by tail length. In the examples above, zero, one, and two iota are left untouched respectively. $(o)Not$() a meta-evaluation on its own.",
	"hexical.page.sekhmet.1": "This simple gambit can be accomplished via $(l:patterns/stackmanip#hexcasting:stack_len)$(action)Flock's Reflection$(), $(l:patterns/lists#hexcasting:last_n_list)$(action)Flock's Gambit$(), $(l:patterns/lists#hexcasting:slice)$(action)Selection Exaltation$(), and $(l:patterns/lists#hexcasting:splat)$(action)Flock's Disintegration$() but this serves as a handy short pattern for clearing up my stack. It also pairs extremely well with Thoth's Gambit, letting me clean up the pseudo-stack should I want to only operate on and return first few iota.$(br2)$(o)Everything is possible, but not everything is necessary.$()",
	"hexcasting.action.hexical:atalanta": "Atalanta's Gambit",
	"hexical.page.atalanta.0": "Should only be run inside $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() or $(l:patterns/metaevals#hexical:sisyphus)$(action)Sisyphus' Gambit$(). Acts similarly to $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() except does not end the iterator, only skips the rest of the current iteration.",
	"hexical.page.atalanta.1": "This pattern can be useful to implement \"guard clauses\" for multiconditional loops. For example, after getting a list of entities, I may want to only target entities based on some large list of conditions. Rather than a mess of deeply nested conditionals, I can simply $(o)continue$() to the next iteration if any of the conditions fail, skipping the action.$(br2)$(o)You shall not pass!$()",
	"hexcasting.action.hexical:castor": "Castor's Gambit",
	"hexical.page.castor.0": "Should only be run within a $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$(). Details on the next page. Beware of triggering the Delve Too Deep mishap.",
	"hexical.page.castor.1": "This pattern pops an iota and schedules a new iteration of $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() to come right after the current one, with the popped iota being the top of the stack. It may be helpful to imagine it as the iota being added to the front of the list that I provided for $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() to iterate over.$(br2)$(o)Do not go where the path may lead, go instead where there is no path... and leave a trail.$()",
	"hexcasting.action.hexical:pollux": "Pollux's Gambit",
	"hexical.page.pollux.0": "Sibling pattern to $(l:patterns/metaevals#hexical:castor)$(action)Castor's Gambit$(), this pattern schedules the additional iteration for the end instead. Carries the same risk of encountering the Delve Too Deep mishap.",
	"hexical.page.pollux.1": "Acts almost identically to its sibling pattern, but places the iteration at the end. I have read scrolls detailing techniques using these twin patterns called $(o)$(l:https://en.wikipedia.org/wiki/Depth-first_search)depth-first search$() and $(o)$(l:https://en.wikipedia.org/wiki/Breadth-first_search)breadth-first search$().$(br2)$(o)Explore the surface before diving deep.$()",
	"hexcasting.action.hexical:sisyphus": "Sisyphus' Gambit",
	"hexical.page.sisyphus.0": "Takes a pattern list and casts it over and over forever until it encounters either a $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() or a $(l:patterns/metaevals#hexical:janus)$(action)Janus' Gambit$().",
	"hexical.page.sisyphus.1": "While I have heard of self-producing _Hexes called $(o)quines$() used to make infinite loops, they can be slightly unwieldy to work with. This gambit simplifies that process by just repeatedly casting a list until it runs out of evaluations or encounters a $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$(). The $(l:patterns/readwrite#hexcasting:local)Ravenmind$() and stack are carried across iterations.$(br2)$(o)One always finds one's burden again... One must imagine Sisyphus happy.$()",
	"hexcasting.action.hexical:themis": "Themis' Gambit",
	"hexical.page.themis.0": "Takes a list and a pattern or pattern list which is used to sort the list by casting over every iota similar to $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's Gambit$().",
	"hexical.page.themis.1": "After each iteration, it demands a number at the top of the stack which will correspond to that iota. At the end of the gambit, a list is pushed with the iota sorted by that number in increasing order. The order of identically numbered iota are kept. If it encounters $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$(), it will create a sorted list with only the iota it has come across.$(br2)$(o)Shuffling is the only thing which Nature cannot undo.$()",

	"hexical.page.akashic_utils.title": "Akashic Utilities",
	"hexical.page.akashic_utils.0": "I have discovered some convenient features of $(l:greatwork/akashiclib)akashic bookshelves$()! I can $(thing)$(k:use)$() or $(l:patterns/spells/prestidigitation)magically interact$() with a filled bookshelf to copy its iota into my stack. I have discovered patterns that can read and write directly to a bookshelf within ambit for free, listed on the next few pages. They require ambit but are entirely free to cast.",
	"hexcasting.action.hexical:key_shelf": "Librarian's Purification",
	"hexical.page.key_shelf.summary": "Reads the pattern key of an akashic bookshelf.",
	"hexcasting.action.hexical:read_shelf": "Librarian's Purification II",
	"hexical.page.read_shelf.summary": "Reads the iota from an akashic bookshelf.",
	"hexcasting.action.hexical:write_shelf": "Librarian's Gambit",
	"hexical.page.write_shelf.summary": "Writes an iota under a pattern key to an akashic bookshelf.",
    "hexcasting.action.hexical:clear_shelf": "Librarian's Gambit II",
    "hexical.page.clear_shelf.summary": "Clears an akashic bookshelf.",

	"hexical.page.mage_block.title": "Mage Blocks",
	"hexical.page.mage_block": "The blocks from $(l:patterns/spells/blockworks#hexcasting:conjure_block)$(action)Conjure Block$() last forever, are consequently a pain to clean up, and are not too versatile. Luckily, Nature offers an elegant and flexible alternative. These mage blocks come with a suite of $(o)modifiers$(). I could even stack multiple modifiers on one block or reapply a modifier to toggle it off.",
	"hexcasting.action.hexical:conjure_mage_block": "Conjure Mage Block",
	"hexical.page.conjure_mage_block.summary": "Conjures a mage block at the location. Costs about three $(l:items/amethyst)$(item)Amethyst Dust$().$(br2)$(o)I can create a city out of nothing, or I can cover it in volcanic rock.$()",
	"hexcasting.action.hexical:modify_block_bouncy": "Modify Block: Bouncy",
	"hexical.page.modify_block_bouncy.summary": "This modifier makes the block delightfully fun to bounce on! It returns more force to me than regular slime blocks and I notice even if I sneak, the block bounces me regardless.",
	"hexcasting.action.hexical:modify_block_energized": "Modify Block: Energized",
	"hexical.page.modify_block_energized.summary": "This modifier makes the block emit a Redstone signal, with the number corresponding to the power level of the output.",
	"hexcasting.action.hexical:modify_block_ephemeral": "Modify Block: Ephemeral",
	"hexical.page.modify_block_ephemeral.summary": "This modifier takes in a number in addition to a position and shatters the block after many twentieths of a second. Subsequent casts can lengthen or shorten the duration.",
	"hexcasting.action.hexical:modify_block_invisible": "Modify Block: Invisible",
	"hexical.page.modify_block_invisible.summary": "This modifier prevents the block from emitting the telltale particles that accompany my casting, even when being stood on.",
	"hexcasting.action.hexical:modify_block_replaceable": "Modify Block: Replaceable",
	"hexical.page.modify_block_replaceable.summary": "This modifier is useful for construction! With this modifier applied, I find I can easily place another block in the place of the mage block.",
	"hexcasting.action.hexical:modify_block_volatile": "Modify Block: Volatile",
	"hexical.page.modify_block_volatile.summary": "This modifier makes the block break other mage blocks it's touching. Notably, if it breaks another volatile block, that block breaks and so on until every volatile block shatters.",

	"hexical.page.dyes.title": "Dyes",
	"hexical.page.dyes.0": "The dye spell and its specialized iota allows me to alter the color of blocks and entities. The dye iota represents a color, but also seems to represent the $(o)potential$() to be colored. For example, attempting to get the dye of grass returns $(l:casting/influences)$(thing)Null$() but getting the dye of undyed terracotta returns $(thing)uncolored$(), which I can use to \"bleach\" dyeable blocks.",
	"hexcasting.action.hexical:get_dye": "Chromatic Purification",
	"hexical.page.get_dye.summary": "Gets the dye of a block, entity, or block/item identifier.",
	"hexcasting.action.hexical:dye": "Dye",
	"hexical.page.dye.summary": "Dyes a dyeable block or entity. Costs about an eighth of one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.dyes.1": "The valid block targets for this spell include beds, candles, cakes with candles, carpets, concrete, concrete powder, glazed terracotta, sand into red sand and vice versa, sandstone and all blocks derived from it into its red variant and vice versa, shulker boxes, stained glass, stained glass panes, terracotta, tulips into their multiple colors, and wool blocks. As for entities, cat collars, dog collars, specklikes, shulkers, and item entities of all of the above blocks are valid.",
	"hexcasting.action.hexical:translate_dye": "Vision Purification",
	"hexical.page.translate_dye.summary": "Translates a dye color into a vector, where each component is from 0 to 1 and represents the red, green, and blueness of the dye respectively.",

	"hexical.page.pigments.title": "Pigment Manipulation",
	"hexical.page.pigments.0": "Like how I can manipulate dyes with patterns, I can also manipulate pigments. I can even store multiple of them and have my hexes randomly choose one to give me for example.",
	"hexcasting.action.hexical:to_pigment": "Pigment Purification",
	"hexical.page.to_pigment.summary": "Takes a colored dye iota and transforms it into a pigment, takes a player and returns their pigment, or takes an item containing a pigment and returns its pigment.",
	"hexcasting.action.hexical:sample_pigment": "Pigment Exaltation",
	"hexical.page.sample_pigment.summary": "Samples the pigment at a certain place and time as a vector, where each component is from 0 to 1 and represents the red, green, and blueness respectively.",
	"hexcasting.action.hexical:take_on_pigment": "Internalize Pigment II",
	"hexical.page.take_on_pigment.summary": "Internalizes a pigment iota.",

	"hexcasting.action.hexical:magic_missile": "Magic Missile",
	"hexical.page.magic_missile.summary": "Conjures a small silver of amethyst that always deals a full heart of damage and forces the target backwards. Costs about one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.magic_missile.0": "The projectile has a few interesting properties. It automatically disappears after roughly ten seconds or shatters upon hitting an entity or block. It pierces all forms of armor and protection. It is also unaffected by gravity and water drag.$(br2)$(o)A weak but enchanting sparkling projectile.$()",
	"hexical.page.magic_missile.1": "The conjuration location is quite esoteric: no wonder most _Hexcasters conjure it in front of them. The basic gist is a vector, where my head's position is the origin, $(l:patterns/basics#hexcasting:get_entity_look)$(action)my facing$() is the Z+ axis, $(l:patterns/scrying/entities#hexical:theodolite)$(action)the vector pointing up from my head$() is the Y+ axis, and the vector from my head pointing rightwards is the X+ axis. For basic purposes, the zero vector conjures it inside my head and a vector resembling (0, 0, n) conjures it n blocks in front of me.",

	"hexcasting.action.hexical:prestidigitation": "Prestidigitation",
	"hexical.page.prestidigitation.summary": "Causes a small magical effect on the block or entity, usually not too distinct from the original nature or function of the block or entity. Costs about a tenth of one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.prestidigitation.0": "This spell differs from all others I've seen. Rather than a single specific effect, this spell seems to combine dozens of small effects into a single spell. It targets a vast array of blocks and entities, and I am constantly finding uses for it. I have documented them on the following pages. I can think of it as general basic magic tricks.",
	"hexcasting.action.hexical:can_prestidigitate": "Alteration Purification",
	"hexical.page.can_prestidigitate.summary": "Pushes whether an entity or location is able to be manipulated with Prestidigitation.",
	"hexical.page.prestidigitation.1": "I've compiled all of its recorded uses from my notes: opens and close fence gates, trapdoors, and doors of all materials; flicks levers and presses buttons; holds down and releases pressure plates; extinguishes fire and soul fire; lights and extinguishes candles and campfires; rings bells; strips wood; carves pumpkins; makes a note block play its sound; triggers dispensers and droppers; dries mud into clay; turns most soil blocks into path blocks and path blocks into tilled soil...",
	"hexical.page.prestidigitation.2": "toggles Redstone lamps; drain cauldrons; modifies the state of Redstone repeaters, comparators, and daylight sensors, ignites and deprimes TNT and creepers; shear sheep; give and take arms from armor stands; makes squid squirt ink; makes pandas sneeze; removes the helmet of a snow golem; make pufferfish instantly swell up; take honeycomb from beehives and nests, and activates some kind of \"great work\" whatever that is.",

	"hexical.page.wristpocket.title": "Wristpocket",
	"hexical.page.wristpocket.0": "I can perform the standard magic trick of vanishing an item and bringing it back. The item hides in the $(o)wristpocket$(), where I can use _media to manipulate it. The wristpocketed item stays with me even after death and I can recall it once I can cast again.$(br2)$(o)Because making something disappear isn't enough; you have to bring it back.$()",
	"hexcasting.action.hexical:wristpocket": "Wristpocket",
	"hexical.page.wristpocket.summary": "This spell vanishes the stack of items in my other hand, or conjures it back, swapping if my other hand is holding something. Costs about a eighth of one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexcasting.action.hexical:wristpocket_item": "Pocket Reflection",
	"hexical.page.wristpocket_item.summary": "Returns the identifier of the item in my wristpocket, or $(l:casting/influences)$(thing)Null$() if it is empty.",
	"hexcasting.action.hexical:wristpocket_count": "Pocket Reflection II",
	"hexical.page.wristpocket_count.summary": "Returns how many items I have in my wristpocket, or 0 if it is empty.",
	"hexcasting.action.hexical:sleight": "Sleight",
	"hexical.page.sleight.summary": "Performs an act of magical sleight of hand to steal items into my wristpocket or expel my wristpocket back into the world. Costs about a fourth of one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.sleight.0": "If taking a vector, it conjures my wristpocketed item at that vector.$(br2)If taking an item entity, if my wristpocket is empty, it is pulled into my wristpocket. If my wristpocket is not empty, the items are swapped.$(br2)$(o)If your sleight of hand causes you to break eye contact with your audience, it is too advanced for your skill level.$()",
	"hexcasting.action.hexical:mage_hand": "Mage Hand",
	"hexical.page.mage_hand.summary": "Conjures a magical hand that uses my wristpocketed item to interact with the world. If my wristpocket is empty, acts as though I had interacted with the world.",
	"hexical.page.mage_hand.0": "If taking an entity, interacts with the entity with the item.$(br)If taking a vector, interacts with the block with the item.$(br2)$(o)A spectral, floating hand appears at a point you choose within range.$()",
	"hexcasting.action.hexical:mage_mouth": "Mage Mouth",
	"hexical.page.mage_mouth.summary": "Makes me eat my wristpocketed item, nourishing me or applying potions to me. Costs about one $(l:items/amethyst)$(item)Amethyst Dust$() and mishaps if the item is not edible.",
	"hexical.page.mage_mouth.0": "Regardless of the time required to usually eat the item, its special effects, my own dietary restrictions, cooldowns on eating the item, or if I'm full, this spell makes me consume it instantly.$(br2)$(o)Let food be thy medicine and medicine be thy food.$()",

	"hexical.page.specks.title": "Specks",
	"hexical.page.specks.0": "I can conjure an image of an iota into the world, called a $(thing)speck$(). Nature allows me to customize them quite extensively, altering their size, thickness of stroke, and more. They also take on my pigment color. Once they are in the world, I can move, rotate, and otherwise alter them for free, regardless of range.",
	"hexcasting.action.hexical:conjure_speck": "Conjure Speck",
	"hexical.page.conjure_speck.summary": "Conjures a speck with the iota, position, and rotation. Costs a negligible amount of _media. Pushes the speck iota to the stack.",
	"hexcasting.action.hexical:move_specklike": "Move Speck",
	"hexical.page.move_specklike.summary": "Moves a speck entity to the position.",
	"hexcasting.action.hexical:rotate_specklike": "Rotate Speck",
	"hexical.page.rotate_specklike.summary": "Rotates a speck entity to face the vector.",
	"hexcasting.action.hexical:roll_specklike": "Roll Speck",
	"hexical.page.roll_specklike.summary": "Accepts a number between 0 and 1, representing a fraction of a full rotation, and rotates the speck's image by that amount.",
	"hexcasting.action.hexical:iota_speck": "Alter Speck",
	"hexical.page.iota_speck.summary": "Changes the speck's iota.",
	"hexcasting.action.hexical:lifetime_specklike": "Time Speck",
	"hexical.page.lifetime_specklike.summary": "Commands the speck to disappear after that many twentieths of a second.",
	"hexcasting.action.hexical:size_specklike": "Resize Speck",
	"hexical.page.size_specklike.summary": "Scales the speck, can range from 0 to 10. Represents size in blocks and is zero by default.",
	"hexcasting.action.hexical:thickness_specklike": "Thicken Speck",
	"hexical.page.thickness_specklike.summary": "Changes the stroke thickness of a pattern speck, can range from 0 to 10. Represents twentieths of a block, and is zero by default.",
	"hexcasting.action.hexical:pigment_specklike": "Paint Speck",
	"hexical.page.pigment_specklike.summary": "Splashes a pigment iota onto the speck, changing its color after creation.",
	"hexcasting.action.hexical:kill_specklike": "Dismiss Speck",
	"hexical.page.kill_specklike.summary": "Forces a speck to disappear.",
	"hexcasting.action.hexical:zone_specklike": "Zone Distillation: Speck",
	"hexical.page.zone_specklike.summary": "Returns specks similarly to other $(l:patterns/entities#hexcasting:zone_entity/animal)zone distillation$() patterns.",

	"hexical.page.simple_spells.title": "Hexical Spells",
	"hexcasting.action.hexical:autograph": "Autograph",
	"hexical.page.autograph.summary": "Permanently autographs the item in my offhand with my name and pigment. Free and can only be done with my staff, as a proof of care.",
	"hexical.page.autograph.description": "An autographed item holds a list of the names people who have casted this spell on it, in order and in shimmering pigmented text. It becomes unstackable with unautographed items, even of the same type, and the same person can sign it multiple times. It may be used as a secure method of ensuring an item was approved of by a person.$(br2)$(o)I disagree strongly with whatever work this quote is attached to.$()",
	"hexcasting.action.hexical:conjure_hexburst": "Conjure Hexburst",
	"hexical.page.conjure_hexburst.summary": "Conjures a $(item)Hexburst$() at the location with the given iota. Costs about one $(l:items/amethyst)$(item)Amethyst Dust$() and is subject to the Transgress Others mishap.",
	"hexical.page.conjure_hexburst.description": "$(item)Hexbursts$() are edible items created by taking an iota and wrapping _media around it, over and over until it gains size. When eaten, a $(item)Hexburst$() instantly adds its iota to the consumer's stack. I shall find this property considerably useful if I ever want to trade my entity reference. Should my stack have an unclosed $(l:patterns/patterns_as_iotas#hexcasting:open_paren)Introspection$(), it pushes it into the forming list.",
	"hexcasting.action.hexical:conjure_hextito": "Conjure Hextito",
	"hexical.page.conjure_hextito.summary": "Conjures a $(item)Hextito$() at the location with the given _Hex. Costs about two $(l:items/amethyst)$(item)Amethyst Dust$() and is subject to the Transgress Others mishap.",
	"hexical.page.conjure_hextito.description": "$(item)Hextitos$() are triangular crunchy snacks I can conjure. When consumed, the consumer immediately casts its _Hex, using their staff's stack unlike a regular $(l:items/hexcasting)$(item)casting device$(). I shall find them useful to make simple actions like raycasts or to give out limited uses of a _Hex I have designed. If a consumer's stack has an unclosed $(l:patterns/patterns_as_iotas#hexcasting:open_paren)Introspection$(), it will not cast, making it quite safe to hand out.",
	"hexcasting.action.hexical:ghast_fireball": "Conjure Fireball",
	"hexical.page.ghast_fireball.summary": "Conjures an explosive fireball that can be punched and damages blocks and leaves an entity reference at the top of the stack. Costs about three $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.ghast_fireball.description": "The conjured fireball simply hangs in the air. It must be propelled via punching it or $(l:patterns/spells/basic#hexcasting:add_motion)$(action)Impulse$(). It can also be deflected via similar methods.$(br2)$(o)A fiery, explosive projectile.$()",
	"hexcasting.action.hexical:llama_spit": "Spit",
	"hexical.page.llama_spit.summary": "Conjures a sticky low-damaging projectile. Costs about a fourth of one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.llama_spit.description": "The projectile does not have any velocity of its own when conjured and moves only due to gravity unless affected by $(l:patterns/spells/basic#hexcasting:add_motion)$(action)Impulse$(). Its damage is negligible and likely unsuited for any combat but it is cheap...$(br2)$(o)A projectile that explodes into a sticky mess.$()",
	"hexcasting.action.hexical:gasp": "Gasp",
	"hexical.page.gasp.summary": "Instantly replenishes a creature's air bubbles. Costs about one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.gasp.description": "Regardless of amount of breath restored, this spell costs exactly one dust so I should ideally wait as long as I safely can before casting this spell. I will find it useful while diving, being teleported into a block, or even keeping sea creatures alive on land.$(br2)$(o)The best way to observe a fish is to become a fish.$()",
	"hexcasting.action.hexical:myodesopsia": "Myodesopsia",
	"hexical.page.myodesopsia.summary": "Conjures a swirl of patterns around me that I and nearby players can see, using the patterns from the list. Free.",
	"hexical.page.myodesopsia.description": "These patterns are similar to the \"floaters\" that appear when I cast using other methods. I can imagine this spell as conjuring what would have appeared had I casted the list. Interestingly, each pattern shows up exactly once no matter how many times it appears in the list.",

	"hexical.page.conjure_compass.title": "Conjure Compasses",
	"hexcasting.action.hexical:conjure_compass": "Conjure Compass",
	"hexical.page.conjure_compass.summary": "Conjures a $(item)Conjured Compass$() at the location pointing towards the second vector, linked to the current dimension. Costs about three $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.conjure_compass.description": "If read with $(l:patterns/readwrite#hexcasting:read)$(action)Scribe's Reflection$(), it returns a unit vector pointing towards the location inside it. In other dimensions, the $(item)Compass$() spins erratically and reading it yields only $(l:casting/influences)$(thing)Null$(). Once I am done with a $(item)Compass$(), I can eat it as a light snack.$(br2)$(o)Aye, the compass doesn't point North. But we're not trying to find North, are we?$()",

	"hexical.page.spike.title": "Conjure Spike",
	"hexical.page.spike.0": "I hear rumors of a sorcerer illager that can summon fangs from the ground. While I find it hard to believe that villagers can shift _media, I have taken inspiration from those myths and created this spell that brings forth spikes from the ground to skewer targets.",
	"hexcasting.action.hexical:spike": "Conjure Spike",
	"hexical.page.spike.summary": "Takes a non-air position, an axis vector, and a delay in seconds up to ten seconds long and conjures a spike at that location. Costs about one $(l:items/amethyst)$(item)Amethyst Shard$().",
	"hexical.page.spike.1": "Each spike takes about a half second to strike and deal a hefty three full hearts of damage before slowly sinking back into the ground. If I cast this spell where a spike has not yet disappeared, it will do nothing. Spikes will also throw back targets in the direction they were conjured.",

	"hexical.page.tchotchke.title": "Tchotchkes",
    "hexical.page.tchotchke.0": "$(item)Tchotchkes$() are not unlike $(l:items/hexcasting)$(item)Cyphers$(). They have an internal media reservior and break when they run out, unable to take from my inventory. They can not be recharged or reprogrammed, and $(l:patterns/spells/hexcasting#hexcasting:erase)$(action)Erase Item$() simply destroys it. Its advantages lay in its conjurability and $(o)input interception$().",
	"hexical.page.tchotchke.1": "When I $(thing)$(k:attack)$() or $(thing)$(k:use)$() while holding a $(item)Tchotchke$(), it intercepts my input, preventing me from interacting with the world. After a number of inputs corresponding to the \"rank\" I assigned at conjuration, it casts the _Hex I gave it, starting the stack with a list of false and true iotas, corresponding to $(thing)$(k:attack)$() or $(thing)$(k:use)$() respectively. If I pause for too long, the current \"cast\" fizzles out.",
	"hexcasting.action.hexical:conjure_tchotchke": "Conjure Tchotchke",
	"hexical.page.conjure_tchotchke.summary": "Conjures a $(item)Tchotchke$() at the location with the amount of _media, rank, and _Hex. Costs about one $(l:items/amethyst)$(item)Charged Amethyst$() and the _media used for the battery.",
	"hexical.page.tchotchke.2": "I find ancient _Hexcasters to be quite fond of these due to their versatility and the ability to conjure them as needed. Tchotchkes also feature an iota storage that can only be edited from the tchotchke itself, allowing each tchotchke to essentially act as a fully-contained magical trinket.$(br2)$(o)Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.$()",
	"hexcasting.action.hexical:write_tchotchke": "Tchotchke Gambit",
	"hexical.page.write_tchotchke.summary": "Writes an iota to the $(item)Tchotchke's$() inner iota storage, which can be read back on future casts. Subject to the Transgress Others mishap and unreadable from any external source.",
	"hexcasting.action.hexical:read_tchotchke": "Tchotchke Reflection",
	"hexical.page.read_tchotchke.summary": "Pushes the iota from the $(item)Tchotchke's$() inner iota storage.",

	"hexical.page.circle_spells.title": "Circle Spells",
	"hexical.page.circle_spells.0": "When the _media courses through the boundaries of a $(l:greatwork/spellcircles)circle$(), it saturates the domain inside with _media, allowing far greater magical effects and flexibility of _media manipulation than I am used to. The following are some spells which rely on that increased density of media and are to only be cast by an $(l:greatwork/impetus)impetus$().",
	"hexcasting.action.hexical:displace": "Displace",
	"hexical.page.displace.summary": "Teleports an entity within the $(l:greatwork/spellcircles)circle$() to any other point inside within the same $(l:greatwork/spellcircles)circle$(). Unlike $(l:patterns/great_spells/teleport)$(action)Greater Teleport$(), this spell takes in world coordinates rather than an offset. Free.",

	"hexical.page.evocation.title": "Evocation",
	"hexical.page.evocation.0": "_Media is the energy of thought, so it stands to reason that I should be able to simply $(o)think$() magic into existence rather than waving around a $(item)$(l:items/staff)Staff$(). After all, I have roughly two chunks' worth of $(l:items/amethyst)$(item)Charged Amethyst$() in me at my prime, double that of my $(l:items/staff)$(item)Staff$(). While I can not yet shift arbitrary effects into reality, I can bring it forth a prepared _Hex with a mere gesture, taking _media from my inventory.",
	"hexcasting.action.hexical:internalize_hex": "Inculcate",
	"hexical.page.internalize_hex.summary": "Etches a _Hex, allowing me to cast it by holding $(thing)$(k:hexical.evoke)$() for one second. Costs about one $(l:items/amethyst)$(item)Charged Amethyst$().$(br2)$(o)Anthony thought at it, and it turned a flip-flop on the grass, and lay trembling, its eyes gleaming in small black terror.$()",
	"hexcasting.action.hexical:is_evoking": "Evoker Reflection",
	"hexical.page.is_evoking.summary": "Pushes how long since a player has been evoking. Is -1 if they are not currently evoking.",
	"hexical.page.evocation.1": "The ancient texts I have learned this technique from reveals many other interesting trifles: _Hexcasters used to perform evocation without any a _Hex, as a greeting or group ritual by waving their arms and chanting in unison. Experiments have also been done to see if a villager could be granted the ability to shift _media but the results of those experiments were either never documented or have been lost to time.",

	"hexical.page.pyrotechnics.title": "Pyrotechnics",
	"hexical.page.pyrotechnics.0": "I have stumbled across some spells related to pyrotechnics. The _media hums quite festively around the patterns, as if they were once used for grand celebrations, although I shudder to imagine how effective they'd be as a weaponized projectile.$(br2)$(o)You don’t need to say anything. Just watch the fireworks.$()",
	"hexcasting.action.hexical:simulate_firework": "Simulate Firework",
	"hexical.page.simulate_firework.summary": "Analyzes the $(item)Firework Star$() in my other hand and conjures a firework of that star, with the position, velocity, and gunpowder amount specified. Costs about one $(l:items/amethyst)$(item)Amethyst Shard$().",
	"hexcasting.action.hexical:conjure_firework": "Conjure Firework",
	"hexical.page.conjure_firework.summary": "$(br)Conjures a firework of my $(o)exact$() specifications. It may be one of the most complex spells in existence. Costs equivalently to the other firework spell.",
	"hexical.page.conjure_firework.0": "$(o)Basic Theory$()$(br2)The first two parameters of the spell are simple position and velocity. The third parameter dictates flight duration as a number from 1 to 3. I can imagine it as being the amount of $(item)Gunpowder$() I would add to a firework rocket.$(br2)The remaining parameters can be imagined as specifications for a $(thing)virtual firework star.$()",
	"hexical.page.conjure_firework.1": "$(o)Shape$()$(br2)The fourth parameter controls the shape of the explosion, based off a number 0 to 3.$(br)- 0 is a simple, small ball-shaped explosion.$(br)- 1 is a large ball-shaped explosion.$(br)- 2 is a star-shaped explosion.$(br)- 3 is a large creeper face-shaped explosion.",
	"hexical.page.conjure_firework.2": "$(o)Colors$()$(br2)The fifth and sixth parameters are lists of $(l:patterns/spells/dyes)dyes$(). The first list controls the colors of the firework's initial burst, while the second controls the colors that the first particles fade into. There must be at least one dye specified for the first list, but the second list can be empty if I do not want any colors to fade into.",
	"hexical.page.conjure_firework.3": "$(o)Special Effects$()$(br2)The seventh parameter controls whether the particles of the firework flicker, as if adding glowstone to the $(item)virtual Firework Star$().$(br2)The eighth parameter controls whether the particles of the firework leave trails, as if adding a diamond to the $(item)virtual Firework Star$().",

	"hexical.page.shaders.title": "Shaders",
	"hexical.page.shaders.0": "These spells revolve around manipulating my light receptors, allowing me to alter my vision for utility and fun. These spells break upon death or me leaving this world and returning at a later date.$(br2)$(o)You sense that something is off. You feel in harmony with the magic. Maan, that color smells interesting. Usual concepts don't apply.$()",
	"hexcasting.action.hexical:shader_clear": "Clear Vision",
	"hexical.page.shader_clear.summary": "Breaks any shader spell currently applied to me. Useful for \"bleaching\" my eyes after too much experimentation.",
	"hexcasting.action.hexical:shader_owl": "Pierce Darkness",
	"hexical.page.shader_owl.summary": "Greatly augments my ability to see in the dark, although the light resultingly becomes extremely blinding.",
	"hexcasting.action.hexical:shader_lines": "Visualize Forms",
	"hexical.page.shader_lines.summary": "Transforms the world into a thin outline of black and white. Possibly useful for identifying subtle contrasts.",
	"hexcasting.action.hexical:shader_tv": "Broadcast Vision",
	"hexical.page.shader_tv.summary": "Alters my vision to contain strange lines and make objects towards the center of my vision bulge \"towards\" me. Seems to be in reference to something...",
	"hexcasting.action.hexical:shader_media": "Identify Importance",
	"hexical.page.shader_media.summary": "Transforms my vision to perceive only the most important things...",
	"hexcasting.action.hexical:shader_spider": "Split Vision",
	"hexical.page.shader_spider.summary": "Splits my vision into multiple sections, similar to what a spider might see. I am unsure whether it actually grants me more vision...",

	"hexical.category.scrying": "Scrying",
	"hexical.category.scrying.desc": "I have stumbled upon a branch of manipulating _media entirely focused around information about the world. These patterns can divine a surprising amount of information like types of blocks, status effects, the weather, the nutritional value of food, whether I am sprinting, $(o)block explosion resistance$(), and more. While likely not useful for the majority of _Hexes, these will be convenient to have, should I ever need them.",

	"hexical.page.blocks.title": "Blocks",
	"hexcasting.action.hexical:block_hardness": "Miner's Purification",
	"hexical.page.block_hardness.summary": "Pushes how difficult blocks of that block type are to mine.",
	"hexcasting.action.hexical:block_blast_resistance": "Demoman's Purification",
	"hexical.page.block_blast_resistance.summary": "Pushes how resistant blocks of that block type are to explosions.",
	"hexcasting.action.hexical:blockstate_waterlogged": "Plumber's Purification",
	"hexical.page.blockstate_waterlogged.summary": "Pushes whether the block is waterlogged, or $(l:casting/influences)$(thing)Null$() if the block can not be waterlogged.",
	"hexcasting.action.hexical:blockstate_rotation": "Orientation Purification",
	"hexical.page.blockstate_rotation.summary": "Pushes the vector of the block's facing direction, or $(l:casting/influences)$(thing)Null$() if the block does not have a facing direction.",
	"hexcasting.action.hexical:blockstate_crop": "Farmer's Purification",
	"hexical.page.blockstate_crop.summary": "Pushes a number 0 to 1, corresponding to how grown that crop is, as well as beehives, composters, and cauldrons. Strangely works on cakes too.",
	"hexcasting.action.hexical:blockstate_glow": "Glowing Purification",
	"hexical.page.blockstate_glow.summary": "Pushes a boolean for whether the block is in a \"lit\" state, for example furnaces, Redstone torches, lamps, and campfires.",
	"hexcasting.action.hexical:blockstate_lock": "Lock Purification",
	"hexical.page.blockstate_lock.summary": "Pushes a boolean for whether the block is currently in a \"open\" state, for example doors, trapdoors, fence gates, and open barrels.",
	"hexcasting.action.hexical:blockstate_turn": "Angle Purification",
	"hexical.page.blockstate_turn.summary": "Pushes a number corresponding to the rotation of signs, skulls, and banners.",
	"hexcasting.action.hexical:blockstate_bunch": "Bunching Purification",
	"hexical.page.blockstate_bunch.summary": "Pushes how many are in a bunch block, or $(l:casting/influences)$(thing)Null$() otherwise. Useful only for candles, sea pickles, and turtle eggs.",
	"hexcasting.action.hexical:blockstate_book": "Book Purification",
	"hexical.page.blockstate_book.summary": "Pushes a boolean for whether lecterns or jukeboxes have a book/music disc in them respectively. I read that it may work for some kind of bookshelf involved in a great work too.",

	"hexical.page.enchantments.title": "Enchantments",
	"hexcasting.action.hexical:get_enchantments": "Thaumaturgist's Purification",
	"hexical.page.get_enchantments.summary": "Gets a list of enchantments the item has.",
	"hexcasting.action.hexical:get_enchantment_strength": "Charm Distillation",
	"hexical.page.get_enchantment_strength.summary": "Gets the strength of the specific enchantment on the item.",

	"hexical.page.entities.title": "Entities",
	"hexcasting.action.hexical:entity_width": "Caliper's Purification",
	"hexical.page.entity_width.summary": "Similar to $(l:patterns/basics#hexcasting:get_entity_height)$(action)Stadiometer's Purification$() but pushes the width of an entity rather than its height.",
	"hexcasting.action.hexical:theodolite": "Theodolite's Purification",
	"hexical.page.theodolite.summary": "Similar to $(l:patterns/basics#hexcasting:get_entity_look)$(action)Alidade's Purification$() but pushes the vector that points upwards from their head rather than the entity's facing vector.",
	"hexcasting.action.hexical:get_health": "Vitality Purification",
	"hexical.page.get_health.summary": "Pushes how close an entity is to death. I can think of these in terms of half-hearts.",
	"hexcasting.action.hexical:get_max_health": "Fitness Purification",
	"hexical.page.get_max_health.summary": "Pushes how much health an entity can have at its prime. I can think of these in terms of half-hearts.",
	"hexcasting.action.hexical:get_air": "Suffocation Purification",
	"hexical.page.get_air.summary": "Pushes the number of seconds before an entity will start to suffocate. This applies to marine creatures out of water as well as land creatures in water.",
	"hexcasting.action.hexical:get_max_air": "Lung Purification",
	"hexical.page.get_max_air.summary": "Pushes the number of seconds an entity can last outside their normal breathing environment before they start suffocating.",
	"hexcasting.action.hexical:get_player_hunger": "Hunger Purification",
	"hexical.page.get_player_hunger.summary": "Pushes how full a player is. I can imagine this as half-hunger-hunches.",
	"hexcasting.action.hexical:get_player_saturation": "Stamina Purification",
	"hexical.page.get_player_saturation.summary": "Pushes my saturation, which roughly correlates to how long the player will remain full.",
	"hexcasting.action.hexical:is_burning": "Inferno Purification",
	"hexical.page.is_burning.summary": "Pushes whether the entity is burning. Also applies to entities that are visually on fire, even if they are immune to fire, such as blazes attacking.",
	"hexcasting.action.hexical:burning_time": "Inferno Purification II",
	"hexical.page.burning_time.summary": "Pushes how long in seconds the entity will continue burning if not put out.",
	"hexcasting.action.hexical:is_wet": "Enderman's Purification",
	"hexical.page.is_wet.summary": "Pushes whether the entity is touching rain, water, or in a bubble column.",
	"hexcasting.action.hexical:is_baby": "Youth Purification",
	"hexical.page.is_baby.summary": "Pushes whether a living creature is in its baby form. Also works on armor stands oddly.",
	"hexcasting.action.hexical:breedable": "Reproduction Purification",
	"hexical.page.breedable.summary": "Pushes whether an animal creature is in love and ready to mate, or $(l:casting/influences)$(thing)Null$() if that creature is not capable of that type of reproduction.",
	"hexcasting.action.hexical:is_sleeping": "Sloth's Purification",
	"hexical.page.is_sleeping.summary": "Pushes whether the entity is sleeping. Applies to players, cats, foxes, and a variety of other creatures.",
	"hexcasting.action.hexical:is_sprinting": "Racer's Purification",
	"hexical.page.is_sprinting.summary": "Pushes whether the entity is sprinting. Includes if I am swimming or if I have left the ground since sprinting and extends to cats, foxes, and more.",

	"hexical.page.environment.title": "Environment",
	"hexical.page.environment.0": "This section of patterns is quite meta: they push properties of the magical environment they are running in. Certain environments are unable to cast certain patterns so this section may be useful in avoiding mishaps.",
	"hexcasting.action.hexical:env_ambit": "Ambit Purification",
	"hexical.page.env_ambit.summary": "Pushes whether a location or entity is in ambit.",
	"hexcasting.action.hexical:env_staff": "Staff Reflection",
	"hexical.page.env_staff.summary": "Pushes whether a staff is being used to cast this pattern.",
	"hexcasting.action.hexical:env_offhand": "Dexterity Reflection",
	"hexical.page.env_offhand.summary": "Pushes whether the most dominant hand of the caster is being used to cast this pattern. May work strangely for casters without hands...",
	"hexcasting.action.hexical:env_media": "Media Reflection",
	"hexical.page.env_media.summary": "Pushes the media available to this current cast.",
	"hexcasting.action.hexical:env_packaged_hex": "Device Reflection",
	"hexical.page.env_packaged_hex.summary": "Pushes whether any form of casting device is being used to cast this pattern.",
	"hexcasting.action.hexical:env_evocation": "Evocation Reflection",
	"hexical.page.env_evocation.summary": "Pushes whether pure mental effort is being used to cast this pattern.",
	"hexcasting.action.hexical:env_circle": "Constructed Reflection",
	"hexical.page.env_circle.summary": "Pushes whether some form of grand work is being used to cast this pattern.",
	"hexcasting.action.hexical:env_hand_lamp": "Wish Reflection",
	"hexical.page.env_hand_lamp.summary": "Pushes whether a genie lamp is being used to cast this pattern.",
	"hexcasting.action.hexical:env_arch_lamp": "Grand Wish Reflection",
	"hexical.page.env_arch_lamp.summary": "Pushes whether an arch genie lamp is being used to cast this pattern.",
	"hexcasting.action.hexical:env_tchotchke": "Tchotchke Reflection",
	"hexical.page.env_tchotchke.summary": "Pushes whether a tchotchke is being used to cast this pattern.",

	"hexical.page.food.title": "Food",
	"hexcasting.action.hexical:edible": "Edibility Purification",
	"hexical.page.edible.summary": "Takes in an item identifier and pushes whether I can eat it.",
	"hexcasting.action.hexical:get_hunger": "Calorie Purification",
	"hexical.page.get_hunger.summary": "Takes in an item identifier and pushes the amount it will fill me.",
	"hexcasting.action.hexical:get_saturation": "Satiation Purification",
	"hexical.page.get_saturation.summary": "Takes in an item identifier and pushes the saturation value, which roughly affects how long it will fill me.",
	"hexcasting.action.hexical:is_meat": "Flesh Purification",
	"hexical.page.is_meat.summary": "Takes in an item identifier and pushes whether it's considered a meat, meaning wolves can eat it.",
	"hexcasting.action.hexical:is_snack": "Dessert Purification",
	"hexical.page.is_snack.summary": "Takes in an item identifier and pushes whether it's a snack, meaning I can eat it really quickly.",

	"hexical.page.identifiers.title": "Identifiers",
	"hexical.page.identifiers.0": "My _Hexes has so far been quite blind to the world. I can get a creature's height, velocity, and more but I can't directly identify that entity. Nature's solution to the problem is the $(o)identifier iota$(). Every entity, block, status effect, enchantment, sound, etc... has a unique identifier that my _Hexes can identify. Once I have two identifiers, I can compare them with each other.",
	"hexcasting.action.hexical:identify": "Detective's Purification",
	"hexical.page.identify.summary": "Pushes the identifier of an entity or block at a vector.",
	"hexical.page.identifiers.1": "I notice that if I were to use Detective's Purification on an item, it returns that it's an item entity, but if I were to use Recognizer's Purification on that same entity, it would return the type of item. This type of item matches with a block identifier returned by Detective's Purification. I can imagine Recognizer's as returning $(o)additional$() information if possible.",
	"hexcasting.action.hexical:recognize": "Recognizer's Purification",
	"hexical.page.recognize.summary": "Pushes extra identifier information of an entity, mainly the item type of an item entity or the item type inside an item frame entity.",
	"hexcasting.action.hexical:classify": "Classifier's Purification",
	"hexical.page.classify.summary": "Pushes the identifier of an iota's type. Can be used to determine whether two iota are the same type.",
	"hexcasting.action.hexical:get_mainhand_stack": "Tool Purification",
	"hexical.page.get_mainhand_stack.summary": "Returns the type of item in my mainhand.",
	"hexcasting.action.hexical:get_offhand_stack": "Accessory Purification",
	"hexical.page.get_offhand_stack.summary": "Returns the type of item in my offhand.",

	"hexical.page.item.title": "Items",
	"hexcasting.action.hexical:count_stack": "Storage Purification",
	"hexical.page.count_stack.summary": "Takes in an item entity and pushes how many items are in it.",
	"hexcasting.action.hexical:count_max_stack": "Warehouse Purification",
	"hexical.page.count_max_stack.summary": "Takes in an item entity and pushes how many items that can stack in it.",
	"hexcasting.action.hexical:damage_stack": "Deterioration Purification",
	"hexical.page.damage_stack.summary": "Takes in an item entity and pushes how much damage the item has sustained.",
	"hexcasting.action.hexical:damage_max_stack": "Fragility Purification",
	"hexical.page.damage_max_stack.summary": "Takes in an item entity and pushes how much durability the item can have at its peak.",

	"hexical.page.status_effects.title": "Status Effects",
	"hexcasting.action.hexical:get_effects_entity": "Diagnosis Purification",
	"hexical.page.get_effects_entity.summary": "Pushes a list of status effects the entity is afflicted with.",
	"hexcasting.action.hexical:get_effects_item": "Prescription Purification",
	"hexical.page.get_effects_item.summary": "Pushes a list of status effects the food or potion will bestow.",
	"hexcasting.action.hexical:get_effect_category": "Condition Purification",
	"hexical.page.get_effect_category.summary": "Pushes the general \"goodness\" of the effect towards the afflicted. -1 for harmful, 0 for neutral, and 1 for beneficial.",
	"hexcasting.action.hexical:get_effect_amplifier": "Concentration Distillation",
	"hexical.page.get_effect_amplifier.summary": "Pushes the potency of the specific effect acting on the entity or $(l:casting/influences)$(thing)Null$() if the entity doesn't have it.",
	"hexcasting.action.hexical:get_effect_duration": "Clearance Distillation",
	"hexical.page.get_effect_duration.summary": "Pushes how long the effect will last in seconds or $(l:casting/influences)$(thing)Null$() if the entity doesn't have it.",

	"hexical.page.world.title": "World",
	"hexcasting.action.hexical:get_light": "Luminance Purification",
	"hexical.page.get_light.summary": "Pushes the light level at the position as a number 0 to 15. If inside a nontransparent block, it returns zero.",
	"hexcasting.action.hexical:get_weather": "Meterologist's Reflection",
	"hexical.page.get_weather.summary": "Pushes a number corresponding to the weather. 0 for clear, 1 for rain, and 2 for thundering.",
	"hexcasting.action.hexical:get_power": "Battery Purification",
	"hexical.page.get_power.summary": "Pushes the Redstone power that a position receives.",
	"hexcasting.action.hexical:get_comparator": "Peripheral Purification",
	"hexical.page.get_comparator.summary": "Pushes the power level a comparator would output if pressed against a position.",
	"hexcasting.action.hexical:get_day": "Circadian Reflection",
	"hexical.page.get_day.summary": "Pushes the progress of the day as a number between 0 (start) and 1 (end) of the day.",
	"hexcasting.action.hexical:get_time": "Temporal Reflection",
	"hexical.page.get_time.summary": "Pushes the age of the world for timekeeping, unaffected by events such as sleeping. Divided by 20, it returns seconds.",
	"hexcasting.action.hexical:get_biome": "Geographical Purification",
	"hexical.page.get_biome.summary": "Pushes the identifier of the biome type that the vector is within.",
	"hexcasting.action.hexical:get_dimension": "Plane Reflection",
	"hexical.page.get_dimension.summary": "Pushes the identifier of the dimension the _Hex is being cast in.",
	"hexcasting.action.hexical:get_einstein": "Distortion Reflection",
	"hexical.page.get_einstein.summary": "Pushes whether this dimension is bounded by standard rules of space and time: compasses and clocks will work here.",

	"hexcasting.action.hexical:greater_blink": "Greater Blink",
	"hexical.page.greater_blink.0": "Greater Blink is a significantly cheaper alternative to $(l:patterns/great_spells/teleport)$(action)Greater Teleport$(). It also does not carry the risk of splattering my items upon arrival. However, it only has pitiful range compared to $(l:patterns/great_spells/teleport)$(action)Greater Teleport$() and its destination calculations are... esoteric. Its target is also exclusively myself.",
	"hexical.page.greater_blink.summary": "Teleports me up to 128 blocks away, relative to my position and rotation. Costs about two $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.greater_blink.1": "A vector of (0, 0, 1) would teleport me one block in the direction I'm facing. A vector of (0, 1, 0) would teleport me one block \"up\" in the direction of the top of my head. A vector of (0, 1, 10) would teleport me ten blocks forward in the direction I'm facing and one block upwards from the top of my head.",
	"hexical.page.greater_blink.2": "Peculiarly, it moves my feet to the location, perhaps so that a raycast teleports my feet onto the target block rather than my eyes submerged into the floor. If I want to do multiple jumps for long distances, this property must be accounted for.$(br2)$(o)Long Jaunt! Longer than you think-$()",

	"hexical.page.meshes.title": "Meshes",
	"hexical.page.meshes.0": "Meshes are the natural evolution of $(l:patterns/spells/specks)specks$(). Rather than being restricted to iotas and patterns on a two-dimensional plane, meshes accept a list of vectors in three-dimensional space and connect them with lines, allowing for infinite creative constructions. It's also responsive to most patterns used for manipulation of specks.",
	"hexcasting.action.hexical:conjure_mesh": "Conjure Mesh",
	"hexical.page.conjure_mesh.summary": "Conjures a mesh with the location and leaves a mesh entity on the stack. Costs about one $(l:items/amethyst)$(item)Amethyst Dust$().",
	"hexical.page.meshes.1": "When initally conjured, the mesh is invisible and must be woven to gain form. The constraints for the list of vectors provided to a mesh are quite minimal. The list must be no more than 32 vectors long, and those vectors must have magnitudes less than 10. The mesh will then connect each of those points.",
	"hexcasting.action.hexical:weave_mesh": "Weave Mesh",
	"hexical.page.weave_mesh.summary": "Takes a list of vectors, with constraints defined on the prior page, and weaves the mesh into that shape. Free.",
	"hexcasting.action.hexical:read_mesh": "Tangle Purification",
	"hexical.page.read_mesh.summary": "Pushes the shape of a mesh as a list of vectors."
}
